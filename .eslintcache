[{"C:\\firstproject\\eCommerceMERN\\client\\src\\index.js":"1","C:\\firstproject\\eCommerceMERN\\client\\src\\reportWebVitals.js":"2","C:\\firstproject\\eCommerceMERN\\client\\src\\App.js":"3","C:\\firstproject\\eCommerceMERN\\client\\src\\pages\\auth\\Login.js":"4","C:\\firstproject\\eCommerceMERN\\client\\src\\pages\\auth\\Register.js":"5","C:\\firstproject\\eCommerceMERN\\client\\src\\pages\\Home.js":"6","C:\\firstproject\\eCommerceMERN\\client\\src\\components\\nav\\Header\\index.js":"7","C:\\firstproject\\eCommerceMERN\\client\\src\\firebase.js":"8","C:\\firstproject\\eCommerceMERN\\client\\src\\pages\\auth\\RegisterComplete.js":"9","C:\\firstproject\\eCommerceMERN\\client\\src\\reducers\\index.js":"10","C:\\firstproject\\eCommerceMERN\\client\\src\\reducers\\user_reducer.js":"11","C:\\firstproject\\eCommerceMERN\\client\\src\\pages\\auth\\ForgotPassword.js":"12","C:\\firstproject\\eCommerceMERN\\client\\src\\store\\index.js":"13","C:\\firstproject\\eCommerceMERN\\client\\src\\sagas\\index.js":"14","C:\\firstproject\\eCommerceMERN\\client\\src\\sagas\\auth_sagas.js":"15","C:\\firstproject\\eCommerceMERN\\client\\src\\pages\\user\\History.js":"16","C:\\firstproject\\eCommerceMERN\\client\\src\\components\\routes\\UserRoute.js":"17","C:\\firstproject\\eCommerceMERN\\client\\src\\components\\routes\\LoadingToRedirect.js":"18","C:\\firstproject\\eCommerceMERN\\client\\src\\components\\nav\\UserNav\\index.js":"19","C:\\firstproject\\eCommerceMERN\\client\\src\\pages\\user\\PasswordUpdate.js":"20","C:\\firstproject\\eCommerceMERN\\client\\src\\pages\\user\\WishList.js":"21"},{"size":738,"mtime":1607199938963,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":1926,"mtime":1607283558242,"results":"25","hashOfConfig":"23"},{"size":3462,"mtime":1607246659217,"results":"26","hashOfConfig":"23"},{"size":1901,"mtime":1606417750377,"results":"27","hashOfConfig":"23"},{"size":130,"mtime":1606212594325,"results":"28","hashOfConfig":"23"},{"size":2128,"mtime":1606405572622,"results":"29","hashOfConfig":"23"},{"size":780,"mtime":1606374979755,"results":"30","hashOfConfig":"23"},{"size":4057,"mtime":1607198348646,"results":"31","hashOfConfig":"23"},{"size":181,"mtime":1606390328331,"results":"32","hashOfConfig":"23"},{"size":241,"mtime":1607194715606,"results":"33","hashOfConfig":"23"},{"size":1950,"mtime":1606417760773,"results":"34","hashOfConfig":"23"},{"size":499,"mtime":1607199929486,"results":"35","hashOfConfig":"23"},{"size":232,"mtime":1607243320124,"results":"36","hashOfConfig":"23"},{"size":1335,"mtime":1607246724905,"results":"37","hashOfConfig":"23"},{"size":327,"mtime":1607283166225,"results":"38","hashOfConfig":"23"},{"size":393,"mtime":1607256734516,"results":"39","hashOfConfig":"23"},{"size":614,"mtime":1607256850846,"results":"40","hashOfConfig":"23"},{"size":483,"mtime":1607258343859,"results":"41","hashOfConfig":"23"},{"size":2584,"mtime":1607355893482,"results":"42","hashOfConfig":"23"},{"size":329,"mtime":1607283330633,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"hzpsot",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\firstproject\\eCommerceMERN\\client\\src\\index.js",[],["95","96"],"C:\\firstproject\\eCommerceMERN\\client\\src\\reportWebVitals.js",[],"C:\\firstproject\\eCommerceMERN\\client\\src\\App.js",["97"],"import { useEffect } from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport { ToastContainer } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { auth } from './firebase.js'\nimport { useDispatch } from 'react-redux'\n\nimport Home from './pages/Home.js'\nimport Login from './pages/auth/Login.js'\nimport Register from './pages/auth/Register.js'\nimport RegisterComplete from './pages/auth/RegisterComplete.js'\nimport ForgotPassword from './pages/auth/ForgotPassword.js'\nimport Header from './components/nav/Header'\nimport History from './pages/user/History'\nimport WishList from './pages/user/WishList'\nimport PasswordUpdate from './pages/user/PasswordUpdate'\nimport UserRoute from './components/routes/UserRoute'\n\n \nfunction App() {\n  const dispatch = useDispatch()\n  // check firebase auth state\n  useEffect(()=>{\n    const unsubscribe = auth.onAuthStateChanged(async(user)=>{\n      if(user){\n        const idTokenResult = await user.getIdTokenResult()\n        dispatch({\n          type: 'GET_LOGGED_IN_USER_SAGA',\n          payload: {\n            token : idTokenResult.token\n          }\n        })\n      }\n    })\n    return () =>unsubscribe()\n  }, [])\n  return (\n    <>\n      <ToastContainer />\n      <Header />\n      <Switch>\n        <Route exact path='/' component={Home}/>\n        <Route exact path='/login' component={Login}/>\n        <Route exact path='/register' component={Register}/>\n        <Route exact path='/register/complete' component={RegisterComplete}/>\n        <Route exact path='/forgot/password' component={ForgotPassword}/>\n        <UserRoute exact path='/user/history'>\n            <History />\n        </UserRoute>\n        <UserRoute exact path='/user/password'>\n            <PasswordUpdate />  \n        </UserRoute>\n        <UserRoute exact path='/user/wishlist'>\n            <WishList />\n        </UserRoute>\n      </Switch>\n    </>\n  )\n}\n\nexport default App;\n","C:\\firstproject\\eCommerceMERN\\client\\src\\pages\\auth\\Login.js",["98","99","100"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { auth, googleAuthProvider } from '../../firebase.js'\r\n\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { Button } from 'antd'\r\nimport { MailOutlined, GoogleOutlined } from '@ant-design/icons'\r\n\r\nconst Login = ({history}) => {\r\n\tconst [email, setEmail] = useState('');\r\n\tconst [password, setPassword] = useState('');\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [errors, setError] = useState([]);\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst user = useSelector((state) => state.user)\r\n\r\n\tuseEffect(()=>{\r\n\t\tuser&&user.token&&history.push('/')\r\n\t}, [user])\r\n\r\n\t//simple client side validation\r\n\tconst isFormValid = () => {\r\n\t\treturn email&&password.length>5\r\n\t}\r\n\r\n\tconst handleSubmit =  async (e) => {\r\n\t\te.preventDefault()\r\n\t\tsetLoading(true)\r\n\t\t//chek form validationn\r\n\t\tif(isFormValid()){\r\n\t\t\t// try to get user from firebase\r\n\t\t\ttry{\r\n\t\t\t\tconst result = await auth.signInWithEmailAndPassword(email, password)\r\n\t\t\t\tif(result.user){\r\n\t\t\t\t\tconst { user } = result\r\n\t\t\t\t\tconst idTokenResult = await user.getIdTokenResult()\r\n\t\t\t\t\t// save user to redux store\r\n\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\ttype: 'LOGGED_IN_USER_SAGA',\r\n\t\t\t\t\t\tpayload: {\r\n\t\t\t\t\t\t\ttoken: idTokenResult.token,\r\n\t\t\t\t\t\t\thistory\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\t//display error from firebase\r\n\t\t\t\ttoast.error(error.message)\r\n\t\t\t\tsetLoading(false)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t//display message that form is not valid\r\n\t\t\ttoast.error('Form is not valid')\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleSignUpWithGoogle = async (e) => {\r\n\t\te.preventDefault();\r\n\t\ttry{\r\n\t\t\tconst result = await auth.signInWithPopup(googleAuthProvider)\r\n\t\t\tconst { user } = result\r\n\t\t\tconst idTokenResult = await user.getIdTokenResult()\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: 'LOGGED_IN_USER_SAGA',\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\ttoken: idTokenResult.token,\r\n\t\t\t\t\thistory\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t} catch (error) {\r\n\t\t\ttoast.error(error.message)\r\n\t\t}\r\n\t}\r\n\r\n\tconst loginForm = () => {\r\n\r\n\t\treturn(\t\t\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\ttype='email'\r\n\t\t\t\t\tclassName='form-control' \r\n\t\t\t\t\tvalue={email}\r\n\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\r\n\t\t\t\t\tplaceholder='Email'\r\n\t\t\t\t\tautoFocus\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\ttype='password'\r\n\t\t\t\t\t\tclassName='form-control' \r\n\t\t\t\t\t\tvalue={password}\r\n\t\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\r\n\t\t\t\t\t\tplaceholder='Your password'\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<Button onClick={handleSubmit}\r\n\t\t\t\t\t\t\tclassName='mb-3'\r\n\t\t\t\t\t\t\ttype='primary'\r\n\t\t\t\t\t\t\tblock\r\n\t\t\t\t\t\t\tshape='round'\r\n\t\t\t\t\t\t\tsize='large'\r\n\t\t\t\t\t\t\tdisabled={!isFormValid()}\r\n\t\t\t\t\t\t\tloading={loading}\r\n\t\t\t\t\t\t\ticon={< MailOutlined />}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t\tLogin with email/password\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button onClick={handleSignUpWithGoogle}\r\n\t\t\t\t\t\t\tclassName='mb-3'\r\n\t\t\t\t\t\t\tblock\r\n\t\t\t\t\t\t\tshape='round'\r\n\t\t\t\t\t\t\tsize='large'\r\n\t\t\t\t\t\t\tloading={loading}\r\n\t\t\t\t\t\t\ticon={<GoogleOutlined />}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t\tLogin with Google\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Link to='forgot/password' className='float-right text-danger' >\r\n\t\t\t\t\t\tForgot password\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</div>\t\t\t\r\n\t\t\t</form>\r\n\t\t)  \t\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div className=\"container p-5\">\r\n\t\t\t<div className='row'>\r\n\t\t\t\t<div className='col-md-6 offset-md-3'>\r\n\t\t\t\t\t{loading?<h1>Loading...</h1> : <h1>Login</h1>}\r\n\t\t\t\t\t{loginForm()} \r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Login","C:\\firstproject\\eCommerceMERN\\client\\src\\pages\\auth\\Register.js",["101"],"import React, { useState, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { auth } from '../../firebase.js'\r\n\r\nimport { toast } from 'react-toastify'\r\n\r\nconst Register = ({history}) => {\r\n\tconst [email, setEmail] = useState('');\r\n\tconst [errors, setError] = useState([]);\r\n\r\n\tconst user = useSelector((state) => state.user)\r\n\r\n\tuseEffect(()=>{\r\n\t\tuser&&user.token&&history.push('/')\r\n\t}, [user])\r\n\r\n\tconst handleSubmit =  async (e) => {\r\n\t\te.preventDefault()\r\n\t\tconst actionCodeSettings = {\r\n\t\t  // URL you want to redirect back to. The domain (www.example.com) for this\r\n\t\t  // URL must be in the authorized domains list in the Firebase Console.\r\n\t\t  url: process.env.REACT_APP_REGISTER_REDIRECT_URL,\r\n\t\t  // This must be true.\r\n\t\t  handleCodeInApp: true\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tawait auth.sendSignInLinkToEmail(email, actionCodeSettings)\r\n\t\t\ttoast.success(`Email is sent to ${email}. Click to complete your registration.`)\r\n\t\t\t// Save the email locally so you don't need to ask the user for it again\r\n\t\t\twindow.localStorage.setItem('emailForSignIn', email);\r\n\t\t\tsetEmail('')\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error)\r\n\t\t\tsetError([...errors, error])\r\n\t\t\ttoast.error(error.message)\r\n\t\t\thistory.push('/login')\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tconst registerForm = () => {\r\n\r\n\t\treturn(\t\t\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype='email'\r\n\t\t\t\t\tclassName='form-control' \r\n\t\t\t\t\tid='email'\r\n\t\t\t\t\tvalue={email}\r\n\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\r\n\t\t\t\t\tplaceholder='Email'\r\n\t\t\t\t\tautoFocus\r\n\t\t\t\t/>\r\n\t\t\t\t<button type='submit' className=\"btn btn-raised\">\r\n\t\t\t\t\t\tRegister{email? ' / ' + email : ''}\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\t\t)  \t\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div className=\"container p-5\">\r\n\t\t\t<div className='row'>\r\n\t\t\t\t<div className='col-md-6 offset-md-3'>\r\n\t\t\t\t\t<h1>Register</h1>\r\n\t\t\t\t\t{registerForm()}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Register","C:\\firstproject\\eCommerceMERN\\client\\src\\pages\\Home.js",[],"C:\\firstproject\\eCommerceMERN\\client\\src\\components\\nav\\Header\\index.js",[],"C:\\firstproject\\eCommerceMERN\\client\\src\\firebase.js",[],"C:\\firstproject\\eCommerceMERN\\client\\src\\pages\\auth\\RegisterComplete.js",["102","103","104"],"import React, { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { auth } from '../../firebase.js'\r\n\r\nimport { toast } from 'react-toastify'\r\n\r\nconst RegisterComplete = ({ history }) => {\r\n\tconst [email, setEmail] = useState('');\r\n\tconst [password, setPassword] = useState('');\r\n\tconst [confirmPassword, setConfirmPassword] = useState('');\r\n\tconst [errors, setError] = useState([]);\r\n\tconst [isEmailFilled, setIsEmailFilled] = useState(window.localStorage.getItem('emailForSignIn'))\r\n\t\r\n\tconst user = useSelector((state)=>state.user)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst isPasswordValid = () => {\r\n\t\t\r\n\t\treturn (\r\n\t\t\tpassword !== confirmPassword? \r\n\t\t\t{error: {message: 'Check your password confirmation'}} :\r\n\t\t\tpassword.length < 6?\r\n\t\t\t{error: {message : 'Password should be at least 6 characters'}} :\r\n\t\t\ttrue\r\n\t\t)\r\n\t\t\r\n\t}\r\n\r\n\tuseEffect(()=>{\r\n\t\t// redirection to home page if user is logged in\r\n\t\tuser&&user.token&&history.push('/')\r\n\t\t// Get the email if available. This should be available if the user completes\r\n\t\t// the flow on the same device where they started it.\r\n\t \t\r\n\t}, [user])\r\n\t\r\n\tuseEffect(()=>{\r\n\t\tif (!isEmailFilled) {\r\n\t\t    // User opened the link on a different device. To prevent session fixation\r\n\t\t    // attacks, ask the user to provide the associated email again. For example:\r\n\t    \ttoast.info('Please provide your email for confirmation');\r\n\t  \t} else {\r\n\t  \t\tsetEmail(window.localStorage.getItem('emailForSignIn'))\r\n\t  \t}\r\n\t}, [])\r\n\r\n\tconst handleSubmit = async (e) => {\r\n\t\te.preventDefault()\r\n\t\t//  Confirm the link is a sign-in with email link.\r\n\t\tif (auth.isSignInWithEmailLink(window.location.href)) {\r\n\t\t\ttry {\r\n\t\t\t\tif(isPasswordValid() === true){\r\n\t\t\t\t\t\r\n\t\t\t\t  \tconst result = await auth.signInWithEmailLink(email, window.location.href);\r\n\t\t\t      \t// You can access the new user via result.user\r\n\t\t\t      \t// Additional user info profile not available via:\r\n\t\t\t     \t// result.additionalUserInfo.profile == null\r\n\t\t\t     \t// You can check if the user is new or existing:\r\n\t\t\t    \t// result.additionalUserInfo.isNewUser\r\n\t\t\t    \tif(result.user.emailVerified){\r\n\t\t\t    \t\twindow.localStorage.removeItem('emailForSignIn')\r\n\t\t\t\t    \tlet user = auth.currentUser\r\n\t\t\t\t    \tawait user.updatePassword(password)\r\n\t\t\t\t    \tconst idTokenResult = await user.getIdTokenResult()\r\n\t\t\t\t    \tconsole.log('user', user, 'idTokenResult', idTokenResult)\r\n\t\t\t\t    \t// redux store\r\n\t\t\t\t    \tdispatch({\r\n\t\t\t\t\t\t\ttype: 'LOGGED_IN_USER_SAGA',\r\n\t\t\t\t\t\t\tpayload: {\r\n\t\t\t\t\t\t\t\ttoken: idTokenResult.token,\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t\t})\r\n\t\t\t\t    \t// redirect\r\n\t\t\t\t    \thistory.push('/')\r\n\t\t\t    \t}\r\n\t\t\t    \t\r\n\t\t\t\t} else {\r\n\t\t    \t\ttoast.error(isPasswordValid().error.message)\r\n\t\t\t\t}\r\n\r\n\t\t      \r\n\t\t\t } catch(error) {\r\n\t\t\t  \tsetError([...errors, error])\r\n\t\t\t  \ttoast.error(error.message)\r\n\t\t\t }\r\n\t\t}\r\n\t\t\t\t  \r\n\t\t    \r\n\r\n\t}\r\n\r\n\t\r\n\tconst RegisterCompleteForm = () => {\r\n\r\n\t\treturn(\t\t\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype='email'\r\n\t\t\t\t\tclassName='form-control' \r\n\t\t\t\t\tid='email'\r\n\t\t\t\t\tvalue={email}\r\n\t\t\t\t\tonChange={(e) =>setEmail(e.target.value)}\r\n\t\t\t\t\tplaceholder='Email'\r\n\t\t\t\t\tdisabled={isEmailFilled}\r\n\t\t\t\t\tautoFocus={!isEmailFilled}\r\n\t\t\t\t/>\r\n\t\t\t\t<br />\r\n\t\t\t\t{console.log(!isEmailFilled)}\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype='password'\r\n\t\t\t\t\tclassName='form-control' \r\n\t\t\t\t\tvalue={password}\r\n\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\r\n\t\t\t\t\tplaceholder='Password'\r\n\t\t\t\t\tautoFocus={isEmailFilled}\r\n\t\t\t\t/>\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype='password'\r\n\t\t\t\t\tclassName='form-control' \r\n\t\t\t\t\tvalue={confirmPassword}\r\n\t\t\t\t\tonChange={(e) => setConfirmPassword(e.target.value)}\r\n\t\t\t\t\tplaceholder='Confirm Password'\r\n\t\t\t\t/>\r\n\t\t\t\t<br />\r\n\t\t\t\t<button type='sybmit' className=\"btn btn-raised\">\r\n\t\t\t\t\t\tComplete\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\t\t)  \t\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div className=\"container p-5\">\r\n\t\t\t<div className='row'>\r\n\t\t\t\t<div className='col-md-6 offset-md-3'>\r\n\t\t\t\t\t<h1>Comlete registration</h1>\r\n\t\t\t\t\t{RegisterCompleteForm()}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default RegisterComplete","C:\\firstproject\\eCommerceMERN\\client\\src\\reducers\\index.js",[],"C:\\firstproject\\eCommerceMERN\\client\\src\\reducers\\user_reducer.js",[],"C:\\firstproject\\eCommerceMERN\\client\\src\\pages\\auth\\ForgotPassword.js",["105"],"import React, { useState, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { Button } from 'antd'\r\nimport { LoadingOutlined } from '@ant-design/icons'\r\n\r\nimport { auth } from '../../firebase.js'\r\n\r\nimport { toast } from 'react-toastify'\r\n\r\nconst ForgotPassword = ({ history }) => {\r\n\tconst [email, setEmail] = useState('')\r\n\tconst [isLoading, setIsLoading] = useState('')\r\n \tconst user = useSelector((state) => state.user)\r\n\r\n \tuseEffect(()=>{\r\n \t\tuser&&user.token&&history.push('/')\r\n \t}, [user])\r\n\r\n\tconst handleSubmit = async (e) => {\r\n\t\te.preventDefault()\r\n\t\tsetIsLoading(true)\r\n\t\tconst actionCodeSettings = {\r\n\t\t  // URL you want to redirect back to. The domain (www.example.com) for this\r\n\t\t  // URL must be in the authorized domains list in the Firebase Console.\r\n\t\t  url: process.env.REACT_APP_FORGOT_PASSWORD_REDIRECT_URL,\r\n\t\t  // This must be true.\r\n\t\t  handleCodeInApp: true\r\n\t\t}\r\n\r\n\t\ttry{\r\n\t\t\tawait auth.sendPasswordResetEmail(email, actionCodeSettings)\r\n\t\t\ttoast.success('Check your email for password reset link')\r\n\t\t\tsetEmail('')\r\n\t\t\tsetIsLoading(false)\r\n\t\t} catch(error){\r\n\t\t\ttoast.error(error.message)\r\n\t\t\tsetIsLoading(false)\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\tconst forgotPasswordForm = () => {\r\n\t\treturn(\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<input type='email'\r\n\t\t\t\t\t   placeholder='Please, enter your email'\r\n\t\t\t\t\t   className='form-control'\r\n\t\t\t\t\t   value={email}\r\n\t\t\t\t\t   onChange={(e)=>setEmail(e.target.value)}\r\n\t\t\t\t\t   autoFocus\r\n\t\t\t\t\t   \r\n\t\t\t\t/>\r\n\t\t\t\t<br />\r\n\t\t\t\t<Button \r\n\t\t\t\t\ttype='danger'\r\n\t\t\t\t\tonClick={handleSubmit}\r\n\t\t\t\t\tshape='round'>Send reset link</Button>\r\n\t\t\t</form>\r\n\t\t)\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div clasName='container'>\r\n\t\t\t<div className='row p-5'>\r\n\t\t\t\t<div className='col-md-6 offset-md-3'>\r\n\t\t\t\t\t{isLoading? <h4>Loading<LoadingOutlined /></h4> : <h4>Forgot password</h4>}\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tforgotPasswordForm()\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ForgotPassword\r\n\r\n","C:\\firstproject\\eCommerceMERN\\client\\src\\store\\index.js",[],"C:\\firstproject\\eCommerceMERN\\client\\src\\sagas\\index.js",[],"C:\\firstproject\\eCommerceMERN\\client\\src\\sagas\\auth_sagas.js",["106","107"],"import axios from 'axios'\r\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects'\r\n\r\nfunction* userLoggedInSaga(action) {\r\n\tconst { history } = action.payload\r\n\t\r\n\tconst res = yield axios.post(`${process.env.REACT_APP_API}/create-update-user`, {}, {\r\n\t\theaders: {\r\n\t\t\tauthtoken: action.payload.token\r\n\t\t}\r\n\t}) \r\n\r\n\t\t\t\t\t\r\n\tconst payload = {\r\n\t\tname: res.data.name,\r\n\t\temail: res.data.email,\r\n\t\ttoken: action.payload.token,\r\n\t\trole: res.data.role,\r\n\t\t_id: res.data._id\r\n\t}\r\n\t\t\t\t\t\t\r\n\r\n\tyield put({type:'LOGGED_IN_USER', payload})\r\n\t// role based redirection \r\n\tres.data.role === 'admin'?\r\n\t\thistory.push('/admin/dashboard'):\r\n\t\thistory.push('/user/history')\r\n}\r\n\r\nexport function* watchUserLoggedIn () {\r\n\tyield takeLatest('LOGGED_IN_USER_SAGA', userLoggedInSaga)\r\n}\r\n// get current user when page reload\r\n\r\nfunction* getLoggedInUserSaga(action) {\r\n\tconst res = yield axios.post(`${process.env.REACT_APP_API}/current-user`, {}, {\r\n\t\theaders: {\r\n\t\t\tauthtoken: action.payload.token\r\n\t\t}\r\n\t}) \r\n\r\n\t\t\t\t\t\r\n\tconst payload = {\r\n\t\tname: res.data.name,\r\n\t\temail: res.data.email,\r\n\t\ttoken: action.payload.token,\r\n\t\trole: res.data.role,\r\n\t\t_id: res.data._id\r\n\t}\r\n\t\t\t\t\t\t\r\n\r\n\tyield put({type:'LOGGED_IN_USER', payload})\r\n}\r\n\r\nexport function* watchGetLoggedInUser(){\r\n\tyield takeLatest('GET_LOGGED_IN_USER_SAGA', getLoggedInUserSaga)\r\n}","C:\\firstproject\\eCommerceMERN\\client\\src\\pages\\user\\History.js",[],"C:\\firstproject\\eCommerceMERN\\client\\src\\components\\routes\\UserRoute.js",["108"],"import React from 'react'\r\nimport { Route, Link } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux'\r\nimport LoadingToRedirect from './LoadingToRedirect'\r\n\r\nconst UserRoute = ({children, ...rest}) => {\r\n\tconst user = useSelector((state) => state.user)\r\n\treturn user&&user.token? <Route {...rest} render={()=> children} /> : <LoadingToRedirect />\r\n}\r\n\r\nexport default UserRoute ","C:\\firstproject\\eCommerceMERN\\client\\src\\components\\routes\\LoadingToRedirect.js",["109"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory} from 'react-router-dom'\r\n\r\nconst LoadingToRedirect = () => {\r\n\tconst [count, setCount] = useState(5)\r\n\tlet history = useHistory()\r\n\r\n\tuseEffect(()=>{\r\n\t\tconst interval = setInterval(()=> {\r\n\t\t\tsetCount((currentCount) => --currentCount)\r\n\t\t}, 1000)\r\n\t\t// redirect once count equal to 0\r\n\t\tif(!count) history.push('/')\r\n\t\t//clean up\r\n\t\treturn () => clearInterval(interval)\r\n\t}, [count])\r\n\treturn (\r\n\t\t<div className='container p-5 text-center'>\r\n\t\t\t<p>Redirecting you in {count} seconds</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default LoadingToRedirect","C:\\firstproject\\eCommerceMERN\\client\\src\\components\\nav\\UserNav\\index.js",[],"C:\\firstproject\\eCommerceMERN\\client\\src\\pages\\user\\PasswordUpdate.js",["110"],"C:\\firstproject\\eCommerceMERN\\client\\src\\pages\\user\\WishList.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":38,"column":6,"nodeType":"117","endLine":38,"endColumn":8,"suggestions":"118"},{"ruleId":"119","severity":1,"message":"120","line":17,"column":9,"nodeType":"121","messageId":"122","endLine":17,"endColumn":15},{"ruleId":"119","severity":1,"message":"123","line":17,"column":17,"nodeType":"121","messageId":"122","endLine":17,"endColumn":25},{"ruleId":"115","severity":1,"message":"124","line":24,"column":5,"nodeType":"117","endLine":24,"endColumn":11,"suggestions":"125"},{"ruleId":"115","severity":1,"message":"124","line":16,"column":5,"nodeType":"117","endLine":16,"endColumn":11,"suggestions":"126"},{"ruleId":"119","severity":1,"message":"127","line":13,"column":24,"nodeType":"121","messageId":"122","endLine":13,"endColumn":40},{"ruleId":"115","severity":1,"message":"124","line":36,"column":5,"nodeType":"117","endLine":36,"endColumn":11,"suggestions":"128"},{"ruleId":"115","severity":1,"message":"129","line":46,"column":5,"nodeType":"117","endLine":46,"endColumn":7,"suggestions":"130"},{"ruleId":"115","severity":1,"message":"124","line":18,"column":6,"nodeType":"117","endLine":18,"endColumn":12,"suggestions":"131"},{"ruleId":"119","severity":1,"message":"132","line":2,"column":10,"nodeType":"121","messageId":"122","endLine":2,"endColumn":14},{"ruleId":"119","severity":1,"message":"133","line":2,"column":21,"nodeType":"121","messageId":"122","endLine":2,"endColumn":30},{"ruleId":"119","severity":1,"message":"134","line":2,"column":17,"nodeType":"121","messageId":"122","endLine":2,"endColumn":21},{"ruleId":"115","severity":1,"message":"124","line":16,"column":5,"nodeType":"117","endLine":16,"endColumn":12,"suggestions":"135"},{"ruleId":"119","severity":1,"message":"136","line":30,"column":10,"nodeType":"121","messageId":"122","endLine":30,"endColumn":14},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["139"],"no-unused-vars","'errors' is assigned a value but never used.","Identifier","unusedVar","'setError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["140"],["141"],"'setIsEmailFilled' is assigned a value but never used.",["142"],"React Hook useEffect has a missing dependency: 'isEmailFilled'. Either include it or remove the dependency array.",["143"],["144"],"'call' is defined but never used.","'takeEvery' is defined but never used.","'Link' is defined but never used.",["145"],"'user' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"148","fix":"150"},{"desc":"148","fix":"151"},{"desc":"152","fix":"153"},{"desc":"148","fix":"154"},{"desc":"155","fix":"156"},"Update the dependencies array to be: [dispatch]",{"range":"157","text":"158"},"Update the dependencies array to be: [history, user]",{"range":"159","text":"160"},{"range":"161","text":"160"},{"range":"162","text":"160"},"Update the dependencies array to be: [isEmailFilled]",{"range":"163","text":"164"},{"range":"165","text":"160"},"Update the dependencies array to be: [count, history]",{"range":"166","text":"167"},[1191,1193],"[dispatch]",[720,726],"[history, user]",[418,424],[1143,1149],[1516,1518],"[isEmailFilled]",[519,525],[449,456],"[count, history]"]